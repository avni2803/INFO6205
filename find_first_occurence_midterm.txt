
public class Solving {


	    public int getIndex(int[] nums, int x) {
	        
	        int firstOccurrence = this.findBound(nums, x, true);
	        
	        if (firstOccurrence == -1) {
	            return -1;
	        }
	        
	      
	        
	        return firstOccurrence ;
	    }
	    
	    private static int findBound(int[] nums, int x, boolean isFirst) {
	        int N = nums.length;
	        int begin = 0, end = N - 1;
	        
	        while (begin <= end) {
	            
	            int mid = (begin + end) / 2;
	            
	            if (nums[mid] == x) {
	                
	                if (isFirst) {
	                    
	                    // This means we found our lower bound.
	                    if (mid == begin || nums[mid - 1] != x) {
	                        return mid;
	                    }
	                    
	                    // Search on the left side for the bound.
	                    end = mid - 1;
	                    
	                } else {
	                    
	                    // This means we found our upper bound.
	                    if (mid == end || nums[mid + 1] != x) {
	                        return mid;
	                    }
	                    
	                    // Search on the right side for the bound.
	                    begin = mid + 1;
	                }
	                
	            } else if (nums[mid] > x) {
	                end = mid - 1;
	            } else {
	                begin = mid + 1;
	            }
	        }
	        
	        return -1;
	    }
	 public static void main(String[] args) {
			
		    int[] arr = {2,4,4,4,6,7,7,7,8,9,9,9};
		    System.out.println(findBound(arr, 7, true));
	}
	}


time 
0(logn)

space
o(1)
