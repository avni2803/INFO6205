class Solution {
    public List<Integer> pancakeSort(int[] arr) {
     List<Integer> a1 = new ArrayList<>();

        for (int vSort = arr.length; vSort > 0; vSort--) {
            // finding the position for value to sort
            int index = this.find(arr, vSort);

            // sinking the value to start  to the bottom,
           
            if (index == vSort - 1)
                continue;
            
            //  check if flipping the value to the head 
            if (index != 0) {
                a1.add(index + 1);
                this.flip(arr, index + 1);
            }
            //  flipping the value now to the bottom
            a1.add(vSort);
            this.flip(arr, vSort);
        }

        return a1;
    }

    public void flip(int[] sublist, int k) {
        int i = 0;
        while (i < k / 2) {
            int tmp = sublist[i];
            sublist[i] = sublist[k - i - 1];
            sublist[k - i - 1] = tmp;
            i += 1;
        }
    }

    public int find(int[] a, int target) {
        for (int i = 0; i < a.length; i++)
            if (a[i] == target)
                return i;
        return -1;   
    }
}